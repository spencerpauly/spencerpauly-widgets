import { formatTimeRangeExplicit, ITimeRange } from '@/lib/shared/types/ITimeRange';

if (!process.env.SPOTIFY_CLIENT_ID) throw Error('[env] No SPOTIFY_CLIENT_ID');
if (!process.env.SPOTIFY_CLIENT_SECRET) throw Error('[env] No SPOTIFY_CLIENT_SECRET');

const client_id = process.env.SPOTIFY_CLIENT_ID;
const client_secret = process.env.SPOTIFY_CLIENT_SECRET;
const basic = Buffer.from(`${client_id}:${client_secret}`).toString('base64');

const TOKEN_ENDPOINT = `https://accounts.spotify.com/api/token`;
const SPOTIFY_API_URL = `https://api.spotify.com/v1`;

const spotifyApi = {
	CURRENT_USER_ENDPOINT: `${SPOTIFY_API_URL}/me`,
	TOP_ITEMS_ENDPOINT: `${SPOTIFY_API_URL}/me/top`,
	CREATE_PLAYLIST_ENDPOINT: (userId: string) => `${SPOTIFY_API_URL}/users/${userId}/playlists`,
	ADD_TRACKS_TO_PLAYLIST: (playlistId: string) =>
		`${SPOTIFY_API_URL}/playlists/${playlistId}/tracks`,
};

const getAccessToken = async (refresh_token: string) => {
	const response = await fetch(TOKEN_ENDPOINT, {
		method: 'POST',
		headers: {
			Authorization: `Basic ${basic}`,
			'Content-Type': 'application/x-www-form-urlencoded',
		},
		body: new URLSearchParams({
			grant_type: 'refresh_token',
			refresh_token,
		}),
	});

	return response.json();
};

export const getUsersTopItems = async (refresh_token: string, type: string, timeRange: string) => {
	const { access_token } = await getAccessToken(refresh_token);
	return fetch(
		`${spotifyApi.TOP_ITEMS_ENDPOINT}/${type}?time_range=${timeRange}&limit=50&offset=0`,
		{
			headers: {
				Authorization: `Bearer ${access_token}`,
			},
		}
	);
};

export const createPlaylistForUser = async (
	refresh_token: string,
	trackIds: string[],
	timeRange: ITimeRange
) => {
	const { access_token } = await getAccessToken(refresh_token);

	const user = await fetch(spotifyApi.CURRENT_USER_ENDPOINT, {
		headers: {
			Authorization: `Bearer ${access_token}`,
		},
	}).then((res) => res.json());

	const currentDate = new Date(Date.now());

	const month = currentDate.getMonth() + 1;
	const day = currentDate.getDate();
	const year = currentDate.getFullYear();

	const playlist = await fetch(spotifyApi.CREATE_PLAYLIST_ENDPOINT(user.id), {
		method: 'POST',
		headers: {
			Authorization: `Bearer ${access_token}`,
		},
		body: JSON.stringify({
			name: `My Top 50 Tracks - ${month}/${day}/${year} - ${formatTimeRangeExplicit(timeRange)}`,
			description:
				'This playlist has been automatically generated by https://widgets.spencerpauly.com/spotify-stats. Enjoy!',
			public: true,
		}),
	}).then((res) => res.json());

	await fetch(spotifyApi.ADD_TRACKS_TO_PLAYLIST(playlist.id), {
		method: 'POST',
		headers: {
			Authorization: `Bearer ${access_token}`,
		},
		body: JSON.stringify({
			position: 0,
			uris: trackIds,
		}),
	}).then((res) => res.json());

	return { playlist };
};

export const SCOPES = [
	'user-library-modify',
	'user-library-read',
	'user-read-email',
	'user-read-private',
	'user-modify-playback-state',
	'user-read-private',
	'user-read-private',
	'user-top-read',
	'playlist-modify-public',
	'playlist-modify-private',
	'playlist-read-collaborative',
	'playlist-read-private',
];

export const REDIRECT_URL = 'http://localhost:4000/api/spotify/callback';
